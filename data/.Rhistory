amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 0)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
}
E(g[[4]])$weight
E(g[[4]])
get.edge.ids(g[[4]], c(2,7))
get.edge.ids(g[[4]], c(7,2))
get.edge.ids(g[[4]], c(10,56))
max(E(g[[4]])$weight)
max(E(g[[1]])$weight)
degree.cent <- centr_degree(g[[1]], mode = "all")
degree.cent <- centr_degree(g, mode = "all")
g <- list()
degree.cent <- list()
degree.str.cent <- list()
#closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], weights=TRUE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]])
}
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 0)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
degree.cent <- list()
degree.str.cent <- list()
#closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE, weights=TRUE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
}
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 0)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
degree.cent <- list()
degree.str.cent <- list()
#closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
}
hour
summary(E(g[[1]])$weight)
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 1)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
degree.cent <- list()
degree.str.cent <- list()
#closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:1){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
}
View(betweenness.cent)
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 1)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
degree.cent <- list()
degree.str.cent <- list()
#closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
}
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 1)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
degree.cent <- list()
degree.str.cent <- list()
closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
closeness.cent[[length(closeness.cent) + 1]] <- closeness(g, gmode="graph", mode = "all")
}
closeness.cent[[length(closeness.cent) + 1]] <- closeness(g[[1]], gmode="graph", mode = "all")
closeness.cent[[length(closeness.cent) + 1]] <- closeness(g[[1]], mode = "all")
closeness(g[[1]], mode = "all")
ggplot(data = polys, mapping = aes(x = long, y = lat), group = group, fill = WRIA_NM) + geom_polygon() + geom_path(color = "white") +
scale_fill_hue(l = 40) +
coord_equal() +
theme(legend.position = "none", title = element_blank(),
axis.text = element_blank())
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 1)
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
degree.cent <- list()
degree.str.cent <- list()
closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
#This is a disconnected graph, so closeness may not be usefull
closeness.cent[[length(closeness.cent) + 1]] <- closeness(g[[hour]], mode = "all")
}
ggplot(data = polys, mapping = aes(x = long, y = lat), group = group, fill = WRIA_NM) + geom_polygon() + geom_path(color = "white") +
scale_fill_hue(l = 40) +
coord_equal() +
theme(legend.position = "none", title = element_blank(),
axis.text = element_blank())
plot(polys)
is.connected(g[[1]], connected = "weak")
install.packages("sna")
library(sna)
sna::is.connected(g, connected = "weak")
igraph::is.connected(g, connected = "weak")
unlibrary(rsa)
detach(sna)
detach("sna")
detach("package:sna", unload=TRUE)
is.connected(g[[1]], mode="weak")
is.connected(g[[1]], mode="strong")
is.connected(g[[1]], mode="true")
is.connected(g[[1]], mode="weak")
for (hour in 1:24){
is.connected(g[[hour]], mode="weak")
}
borrar <- list()
for (hour in 1:24){
borrar[[length(borrar) +1]] <- is.connected(g[[hour]], mode="weak")
}
summary(borrar)
borrar
View(borrar)
x in borrar if TRUE
which(borrar, arr.ind=TRUE)
count(borrar, TRUE)
sum(borrar)
sum(as.integer(borrar))
as.integer(borrar)
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
#Print zones
plot(polys)
#Template graph: undirected and weighted (value 1 by default). Some centralities may fail for weight=0
g_original <- graph_from_adjacency_matrix(adj_matrix, weighted=TRUE, mode="undirected") %>% set_edge_attr("weight", value = 1)
#Calculate all shortest paths
sp <- list()
for (i in 1:nrow(adj_matrix)){
sp[[length(sp) + 1]] <- get.shortest.paths(g_original, i)
}
#g is a list of graphs, one per hour of day
g <- list()
#Centralities:
degree.cent <- list()
degree.str.cent <- list()
closeness.cent <- list()
betweenness.cent <- list()
eigen.cent <- list()
#Index i=TRUE means that graph i is weakly connected
is_connected <- list()
for (hour in 1:24){
current_data <- subset(amsterdam, hod==hour-1)
g[[length(g) + 1]] <- g_original
for(i in 1:nrow(current_data)) {
trip <- current_data[i,]
#ID = position in matrix
from <- trip$sourceid
to <- trip$dstid
#Se convierte el camino A B C en vector A B B C
route <- as.vector(sp[[from]]$vpath[[to]])
EP = rep(route, each=2)[-1]
EP = EP[-length(EP)]
#Coger ID de arista AB y BC (para acceder a E(g[[hour]]))
edge_ids <- get.edge.ids(g[[hour]], EP)
#Incrementar weight de arista AB y BC
E(g[[hour]])$weight[edge_ids] = E(g[[hour]])$weight[edge_ids] + 1
}
is_connected[[length(is_connected) +1]] <- is.connected(g[[hour]], mode="weak")
degree.cent[[length(degree.cent) + 1]] <- centr_degree(g[[hour]], mode = "all")
degree.str.cent[[length(degree.str.cent) + 1]] <- strength(g[[hour]], mode = "all")
betweenness.cent[[length(betweenness.cent) + 1]] <- betweenness(g[[hour]], directed = FALSE)
eigen.cent[[length(eigen.cent) + 1]] <- centr_eigen(g[[hour]], directed = FALSE)
#This is a disconnected graph, so closeness may not be usefull
closeness.cent[[length(closeness.cent) + 1]] <- closeness(g[[hour]], mode = "all")
}
#Number of connected graphs
sum(as.integer(is_connected))
#Print zones
plot(polys, col="blue",border="red"))
#Print zones
plot(polys, col="blue",border="red")
#Print zones
plot(polys, col="red",border="black")
#Print zones
plot(polys, col="red",border="black", lwd=3)
#Print zones
plot(polys, col="drey",border="black", lwd=3)
#Print zones
plot(polys, col="grey",border="black", lwd=3)
#Print zones
plot(polys, col="pink",border="black", lwd=3)
#Print zones
plot(polys, col="lblue",border="black", lwd=3)
#Print zones
plot(polys, col="blue",border="black", lwd=3)
#Print zones
plot(polys, col="red",border="black", lwd=3)
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
#Print zones
plot(polys, col="red",border="black", lwd=3)
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
#Print zones
plot(polys, main = "Uber zones in Amsterdam", col="red",border="black", lwd=3)
#Print zones
plot(polys, main = "Uber zones in Amsterdam", col="red",border="black", lwd=2)
#Print zones
plot(polys, main = "Zones in Amsterdam", col="red",border="black", lwd=2)
adj_matrix
amsterdam <- read.csv("amsterdam-wijk-2018-1-OnlyWeekdays-HourlyAggregate.csv", header = TRUE, sep = ",")
polys <- readOGR("amsterdam_wijk.json")
adj_matrix <- gTouches(polys, byid = TRUE)
summary(adj_matrix)
View(adj_matrix)
plot(adj_matrix)
node_list <- get.data.frame(g[[1]], what = "vertices")
# Determine a community for each edge. If two nodes belong to the
# same community, label the edge with that community. If not,
# the edge community value is 'NA'
edge_list <- get.data.frame(graph, what = "edges") %>%
inner_join(node_list %>% select(name, comm), by = c("from" = "name")) %>%
inner_join(node_list %>% select(name, comm), by = c("to" = "name")) %>%
mutate(group = ifelse(comm.x == comm.y, comm.x, NA) %>% factor())
clear
cls
render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
library(rgeos)
library(igraph)
library(rgdal)
library(rgl)
library(sp)
library(ggplot2)
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
setwd("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\data")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
rmarkdown::render("C:\\Users\\Usuario\\TELECO\\Master Tec Teleco\\2º CURSO\\Redes Sociales y Economicas\\Project\\Uber.Rmd")
